package com.example.holymoly

import android.util.Log
import com.google.firebase.auth.ktx.auth
import com.google.firebase.firestore.ktx.firestore
import com.google.firebase.ktx.Firebase
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.tasks.await
import kotlinx.coroutines.withContext

class FirestoreHelper {
    private val db = Firebase.firestore
    val auth = Firebase.auth

    // 현재 로그인된 사용자 가져오기
    val currentUser = auth.currentUser

    // 현재 로그인된 사용자의 이메일 가져오기
    val userEmail = currentUser?.email

    fun addUserToFirestore(email: String) {

        val data = hashMapOf("user_email" to email)

        db.collection("user").document(email)
            .set(data)
            .addOnSuccessListener { Log.d(TAG, "DocumentSnapshot successfully written!") }
            .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
    }


    fun addHolidayToFirestore(holiday_title:String, start_year: Int, start_month:Int, start_date:Int,
                              end_year:Int, end_month:Int, end_date:Int, category:Int) {
        val data = hashMapOf(
            "holiday_title" to holiday_title,
            "start_year" to start_year,
            "start_month" to start_month,
            "start_date" to start_date,
            "end_year" to end_year,
            "end_month" to end_month,
            "end_date" to end_date,
            "category" to category)

        db.collection("user").document(userEmail!!).
        collection("holiday").add(data)
            .addOnSuccessListener { documentReference ->
                // 성공적으로 데이터 추가됨
                Log.d(TAG, "Document successfully added with autogenerated ID: ${documentReference.id}")
            }
            .addOnFailureListener { e ->
                // 데이터 추가 실패
                Log.w(TAG, "Error adding document", e)
            }

    }

    suspend fun getEachDayHolidaysFromFirestore(new_start_year: Int, new_start_month: Int, new_start_date: Int,
                                                new_end_year: Int, new_end_month: Int, new_end_date: Int): List<Map<String, Int>> {
        return withContext(Dispatchers.IO) {
            val holidayList = mutableListOf<Map<String, Int>>()

            try {
                val documents = db.collection("user")
                    .document(userEmail!!)
                    .collection("holiday")
                    .whereEqualTo("start_year", new_start_year)
                    .whereGreaterThanOrEqualTo("start_month", new_start_month)
                    .whereLessThanOrEqualTo("end_month", new_end_month)
                    .whereGreaterThanOrEqualTo("start_date", new_start_date)
                    .whereLessThanOrEqualTo("end_date", new_end_date)
                    .get()
                    .await()

                for (document in documents) {
                    // 각 문서에 대한 처리
                    val data = document.data
                    // data를 사용하여 필요한 작업 수행
                    holidayList.add(data as Map<String, Int>)
                }
            } catch (exception: Exception) {
                // 쿼리 실패 시 처리
                Log.w(TAG, "Error getting documents: ", exception)
            }

            return@withContext holidayList
        }
    }
    suspend fun getAllHolidaysFromFirestore(email: String): List<Map<String, Any>> {
        return withContext(Dispatchers.IO) {
            try {
                val documents = db.collection("user")
                    .document(email)
                    .collection("holiday")
                    .get()
                    .await()

                val holidayList = mutableListOf<Map<String, Any>>()

                for (document in documents) {
                    // 각 문서에 대한 처리
                    val data = document.data
                    // data를 사용하여 필요한 작업 수행
                    holidayList.add(data)
                }

                return@withContext holidayList
            } catch (exception: Exception) {
                // 쿼리 실패 시 처리
                Log.w(TAG, "Error getting documents: ", exception)
                return@withContext emptyList() // 실패할 경우 빈 리스트 반환 또는 예외처리 방식에 따라 변경
            }
        }
    }
    companion object {
        private const val TAG = "FirestoreHelper"
    }

}