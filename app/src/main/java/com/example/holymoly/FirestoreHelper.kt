package com.example.holymoly

import android.util.Log
import com.example.holymoly.ui.drawer.TicketAdapter
import com.example.holymoly.ui.drawer.TicketInform
import com.google.firebase.firestore.FirebaseFirestoreException
import com.google.firebase.firestore.ktx.firestore
import com.google.firebase.ktx.Firebase
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.tasks.await
import kotlinx.coroutines.withContext

class FirestoreHelper {
    private val db = Firebase.firestore
    //firestore에서 이메일 가져오기
    val authHelper = AuthHelper()
    val userEmail = authHelper.getCurrentUserEmail()
    fun addUserToFirestore(email: String) {

        val data = hashMapOf("user_email" to email)

        db.collection("user").document(email)
            .set(data)
            .addOnSuccessListener { Log.d(TAG, "DocumentSnapshot successfully written!") }
            .addOnFailureListener { e -> Log.w(TAG, "Error writing document", e) }
    }


    fun storeTicketToFireStore(time: String, departCountry: String, arriveCountry : String, departDate : String, arriveDate:String){
        //국제선 or 국내선
        val domList = setOf("CJU", "PUS", "TAE", "ICN", "GMP", "RSU", "USN")
        val type : String = if(arriveCountry in domList && departCountry in domList) "domestic" else  "international"

        //필드 생성
        val data = hashMapOf(
            "time" to time,
            "type" to type,
            "departCountry" to departCountry,
            "arriveCountry" to arriveCountry,
            "departDate" to departDate,
            "arriveDate" to arriveDate )

        //문서 생성
        db.collection("user").document(userEmail!!)
            .collection("myFlight").document(time).set(data)
            .addOnSuccessListener { Log.d("DB", "$time/$type/$departCountry/$departDate") }
            .addOnFailureListener{ Log.d("DB", "Fail") }
    }

    fun getTicketFromFireStore(adapter: TicketAdapter):List<TicketInform>{
        var informs : MutableList<TicketInform> = mutableListOf()

        db.collection("user").document(userEmail!!)
            .collection("myFlight")
            .addSnapshotListener{ qsnap, e ->
                informs.clear()
                for(doc in qsnap!!.documents){
                    val time = doc["time"].toString()
                    val type = doc["type"].toString()
                    val departDate = doc["departDate"].toString()
                    val arriveDate = doc["arriveDate"].toString()
                    val departCountry = doc["departCountry"].toString()
                    val arriveCountry = doc["arriveCountry"].toString()
                    informs.add(TicketInform(time, type, departDate, arriveDate, departCountry, arriveCountry))
                }
                adapter.notifyDataSetChanged()
            }

        return informs
    }

    fun deleteTicketFromFireStore(items: MutableSet<String>, adapter: TicketAdapter) : String{
        //함수 실행 결과 메세지
        var message : String = ""

        //아이템 삭제
        for(time in items){
        db.collection("user").document(userEmail!!)
            .collection("myFlight").document(time)
            .delete()
            .addOnSuccessListener { message = "success" }  //성공
            .addOnFailureListener { e ->
                message = if(e is FirebaseFirestoreException
                    && e.code == FirebaseFirestoreException.Code.NOT_FOUND){
                    "notFound"  //해당 아이템이 존재하지 않음
                } else{
                    "error"     //다른 예외
                }
            }

        }
        adapter.notifyDataSetChanged()
        return message
    }


    fun addHolidayToFirestore(holiday_title:String, start_year: Int, start_month:Int, start_date:Int,
                              end_year:Int, end_month:Int, end_date:Int, category:Int) {
        val data = hashMapOf(
            "holiday_title" to holiday_title,
            "start_year" to start_year,
            "start_month" to start_month,
            "start_date" to start_date,
            "end_year" to end_year,
            "end_month" to end_month,
            "end_date" to end_date,
            "category" to category)

        db.collection("user").document(userEmail!!).
        collection("holiday").document(holiday_title).set(data)
            .addOnSuccessListener { documentReference ->
                // 성공적으로 데이터 추가됨
                Log.d(TAG, "Document successfully added with autogenerated ID: $documentReference")
            }
            .addOnFailureListener { e ->
                // 데이터 추가 실패
                Log.w(TAG, "Error adding document", e)
            }

    }

    suspend fun getMonthHolidaysFromFirestore(this_month:Int): List<Map<String, Any>> {
        return withContext(Dispatchers.IO) {
            try {
                val documents_start = db.collection("user")
                    .document(userEmail!!)
                    .collection("holiday")
                    .whereEqualTo("start_month", this_month)
                    .get()
                    .await()

                val documents_end = db.collection("user")
                    .document(userEmail!!)
                    .collection("holiday")
                    .whereEqualTo("end_month", this_month)
                    .get()
                    .await()

                val holidayList = mutableListOf<Map<String, Any>>()

                for (document in documents_start) {
                    // 각 문서에 대한 처리
                    val data = document.data
                    // data를 사용하여 필요한 작업 수행
                    holidayList.add(data)
                }

                for (document in documents_end) {
                    // 각 문서에 대한 처리
                    val data = document.data
                    // data를 사용하여 필요한 작업 수행
                    if (!holidayList.contains(data)) {
                        holidayList.add(data)
                    }
                }
                return@withContext holidayList
            } catch (exception: Exception) {
                // 쿼리 실패 시 처리
                Log.w(TAG, "Error getting documents: ", exception)
                return@withContext emptyList() // 실패할 경우 빈 리스트 반환 또는 예외처리 방식에 따라 변경
            }
        }
    }
/*
    suspend fun getMonthHolidaysFromFirestore2(this_month:Int, adapter: UpcomingSchedulesAdapter): List<Map<String, Any>> {
        return withContext(Dispatchers.IO) {
            try {
                var documents_start: MutableList<DocumentSnapshot> = mutableListOf()
                db.collection("user")
                    .document(userEmail!!)
                    .collection("holiday").addSnapshotListener{ snap, e ->
                        documents_start.clear()
                        for(doc in snap!!.documents){
                            if(doc["start_month"] == this_month)
                                documents_start.add(doc)
                        }
                        adapter.notifyDataSetChanged()
                    }
                /*.whereEqualTo("start_month", this_month)
                .get()
                .await()*/

                /*val documents_end = db.collection("user")
                    .document(userEmail!!)
                    .collection("holiday")
                    .whereEqualTo("end_month", this_month)
                    .get()
                    .await()*/

                //Log.d("ny", "Number of documents: ${documents_start.size()}")
                //Log.d("ny", "Number of documents: ${documents_end.size()}")

                val holidayList = mutableListOf<Map<String, Any>>()

                for (document in documents_start) {
                    // 각 문서에 대한 처리
                    val data = document.data
                    // data를 사용하여 필요한 작업 수행
                    if (data != null) {
                        holidayList.add(data)
                    }
                }

                /*for (document in documents_end) {
                    // 각 문서에 대한 처리
                    val data = document.data
                    // data를 사용하여 필요한 작업 수행
                    if (!holidayList.contains(data)) {
                        holidayList.add(data)
                    }
                }*/
                return@withContext holidayList
            } catch (exception: Exception) {
                // 쿼리 실패 시 처리
                Log.w(TAG, "Error getting documents: ", exception)
                return@withContext emptyList() // 실패할 경우 빈 리스트 반환 또는 예외처리 방식에 따라 변경
            }
        }
    }

 */

    suspend fun getAllHolidaysFromFirestore(): List<Map<String, Any>> {
        return withContext(Dispatchers.IO) {
            try {
                val documents = db.collection("user")
                    .document(userEmail!!)
                    .collection("holiday")
                    .get()
                    .await()

                val holidayList = mutableListOf<Map<String, Any>>()

                for (document in documents) {
                    // 각 문서에 대한 처리
                    val data = document.data
                    // data를 사용하여 필요한 작업 수행
                    holidayList.add(data)
                }

                return@withContext holidayList
            } catch (exception: Exception) {
                // 쿼리 실패 시 처리
                Log.w(TAG, "Error getting documents: ", exception)
                return@withContext emptyList() // 실패할 경우 빈 리스트 반환 또는 예외처리 방식에 따라 변경
            }
        }
    }

    fun deleteHolidaysFromFirestore(delete_title: String) {
            db.collection("user")
                .document(userEmail!!)
                .collection("holiday")
                .document(delete_title)
                .delete()
                .addOnSuccessListener { Log.d(TAG, "DocumentSnapshot successfully deleted!") }
                .addOnFailureListener { e -> Log.w(TAG, "Error deleting document", e) }
    }

    companion object {
        private const val TAG = "FirestoreHelper"
    }

}